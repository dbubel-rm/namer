package namer

import (
	"bytes"
	g "compress/gzip"
	bin "encoding/gob"
	"fmt"
	"math/rand"
	"time"
)

var z = []byte{
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x92, 0xcd, 0xae, 0xe4, 0x34, 0x10, 0x85, 0x3b, 0x73, 0xf3, 0xdb, 0x33, 0xf3, 0x00,
	0x48, 0x2c, 0x22, 0xb1, 0x1e, 0xc4, 0xbd, 0x42, 0x08, 0xd8, 0xc2, 0x1b, 0xc0, 0x6e, 0xc4, 0xa2, 0x62, 0x57, 0x9c, 0xba, 0xed, 0x94, 0x73, 0xcb, 0xe5,
	0xf4, 0xb8, 0x77, 0x0c, 0x30, 0x6f, 0x89, 0xc4, 0x93, 0xd0, 0xc8, 0xd1, 0x88, 0x55, 0x6c, 0x9d, 0xe8, 0xb8, 0xea, 0x3b, 0xe7, 0xab, 0xfb, 0xef, 0x0f,
	0x55, 0x55, 0x99, 0xea, 0xfe, 0xf1, 0x54, 0xbd, 0xaa, 0xea, 0x9f, 0xc2, 0x82, 0xd5, 0xfd, 0xcf, 0x53, 0x55, 0xff, 0x42, 0x81, 0xab, 0xfb, 0xa7, 0xd3,
	0xe9, 0xf4, 0xe5, 0xfd, 0x8f, 0xaa, 0xaa, 0x5e, 0xbf, 0x7f, 0x7c, 0x7c, 0xfa, 0x2d, 0xaa, 0x10, 0xbb, 0xe3, 0x8f, 0x37, 0xd5, 0xfd, 0x9f, 0xd3, 0xe9,
	0x8b, 0xfb, 0x5f, 0x55, 0x55, 0x0d, 0xef, 0xbf, 0xfb, 0x5f, 0xfa, 0x54, 0xa4, 0x37, 0xa7, 0xd3, 0xbf, 0x0f, 0x7f, 0xdf, 0x3f, 0x56, 0xdb, 0x8f, 0xbf,
	0x2e, 0xc0, 0x97, 0x38, 0xce, 0x41, 0xc6, 0x09, 0x89, 0xdd, 0x08, 0xa3, 0x13, 0x04, 0x1d, 0x15, 0x61, 0x1d, 0x35, 0x8c, 0xd7, 0x20, 0x97, 0xf1, 0x4a,
	0xba, 0x7c, 0x3d, 0xfe, 0x8c, 0xc0, 0xe3, 0xb7, 0xef, 0x9e, 0xbe, 0x7f, 0xf7, 0xf4, 0xcd, 0xe3, 0x0f, 0x3d, 0xd8, 0x95, 0x8a, 0x69, 0x07, 0x36, 0x94,
	0x6f, 0x0f, 0x8e, 0x14, 0x14, 0x6d, 0x07, 0x2b, 0xdc, 0x88, 0x5d, 0x03, 0xec, 0x24, 0x77, 0x70, 0xc5, 0x18, 0x56, 0x1c, 0x26, 0x84, 0xa4, 0x34, 0x27,
	0x5f, 0x4f, 0x18, 0xb5, 0x9f, 0x3c, 0xc5, 0x78, 0xdc, 0x82, 0xb7, 0xed, 0x74, 0x58, 0x34, 0x93, 0xc0, 0x8e, 0xed, 0x24, 0x49, 0xc1, 0xd7, 0x53, 0x8a,
	0xb9, 0x37, 0x0b, 0xc8, 0x4a, 0xec, 0x5a, 0xe3, 0x71, 0x47, 0x69, 0x4c, 0x30, 0x97, 0x5c, 0x9b, 0x10, 0xfc, 0x5b, 0x13, 0xd6, 0x0d, 0x62, 0xa4, 0xc0,
	0xa0, 0x38, 0x94, 0x1b, 0x2a, 0xb2, 0xbe, 0x35, 0x81, 0x2d, 0x46, 0x83, 0x6c, 0x89, 0xdd, 0x60, 0x02, 0xcf, 0x64, 0x91, 0xb5, 0x35, 0x02, 0x7c, 0xc9,
	0x8d, 0x11, 0xb8, 0xe5, 0xde, 0xc2, 0xed, 0xe6, 0x8b, 0xaf, 0x85, 0x6d, 0x43, 0x39, 0x5b, 0x54, 0x2c, 0x0f, 0xa1, 0x3d, 0x5b, 0x8a, 0x2a, 0x60, 0x14,
	0x6d, 0x6b, 0x05, 0x61, 0xcd, 0x0d, 0x82, 0x43, 0xe9, 0xd1, 0x44, 0x05, 0x25, 0xd3, 0xa1, 0x87, 0xa8, 0x64, 0x5a, 0xf4, 0xc7, 0xba, 0xe8, 0xd1, 0x01,
	0x6b, 0x8f, 0x3e, 0xbc, 0x24, 0x64, 0xad, 0x71, 0x23, 0xd3, 0xe3, 0x07, 0x43, 0x5a, 0xf0, 0xcc, 0x28, 0x3b, 0xb2, 0x76, 0x33, 0x46, 0xa5, 0x1d, 0xdb,
	0xd9, 0xc3, 0x05, 0xf3, 0x79, 0xf6, 0xb0, 0x4e, 0x21, 0x43, 0x51, 0x82, 0x49, 0x11, 0x6d, 0x3f, 0x0b, 0x21, 0x5b, 0x9f, 0xdb, 0x59, 0x42, 0xd4, 0xdc,
	0xcc, 0x89, 0x39, 0x77, 0x0e, 0xbc, 0x07, 0xd6, 0xd6, 0xd1, 0xac, 0x68, 0x1b, 0x17, 0xc2, 0x9c, 0x7b, 0x27, 0x60, 0x28, 0xa4, 0xd8, 0x1c, 0x69, 0x35,
	0x0b, 0x6c, 0x5b, 0xee, 0x17, 0x10, 0x6b, 0x82, 0x60, 0xb7, 0x84, 0x0d, 0xe7, 0xe4, 0xdb, 0x25, 0x95, 0x04, 0xce, 0xc4, 0x33, 0x78, 0x4f, 0x93, 0xc7,
	0x81, 0x38, 0x6e, 0x47, 0x6a, 0xaf, 0x89, 0x15, 0xa5, 0x8c, 0xf4, 0xf9, 0xec, 0x3d, 0x39, 0x64, 0x6d, 0x9e, 0x83, 0xf7, 0xb9, 0x7d, 0x0e, 0x3b, 0x81,
	0xaf, 0x2f, 0x88, 0x5c, 0x5f, 0x88, 0x6d, 0xef, 0x21, 0xb9, 0xa5, 0xf0, 0xf4, 0xe8, 0x90, 0x2d, 0x48, 0x6e, 0x7d, 0xd8, 0x4b, 0x66, 0x3e, 0x19, 0xb2,
	0xdd, 0x0a, 0x8e, 0x0c, 0xf8, 0xf3, 0x9a, 0xa3, 0xd2, 0x9c, 0x0b, 0xd9, 0x35, 0x58, 0x8c, 0xda, 0xae, 0x29, 0x16, 0x0c, 0x5c, 0x0c, 0x34, 0x77, 0x8c,
	0xb2, 0x87, 0x14, 0x6b, 0x26, 0x83, 0x0d, 0xd3, 0xac, 0x79, 0xe0, 0x10, 0x15, 0xbc, 0x23, 0x33, 0x84, 0xe9, 0x19, 0x4d, 0xa1, 0x74, 0x0e, 0x9b, 0xd2,
	0x4a, 0x05, 0x73, 0xbf, 0x21, 0x98, 0xb2, 0x4e, 0xbf, 0xa1, 0x05, 0x2e, 0x01, 0x6c, 0xc8, 0x91, 0x76, 0x1c, 0xb6, 0x12, 0x53, 0x79, 0x76, 0xd8, 0x84,
	0x0c, 0x7a, 0x8c, 0xb1, 0x7d, 0x49, 0x24, 0x97, 0x3c, 0xbc, 0x24, 0xba, 0xdd, 0x0e, 0x49, 0xd0, 0x24, 0x39, 0x46, 0x10, 0xf4, 0xf0, 0x01, 0x6d, 0x2f,
	0xa5, 0x49, 0xc8, 0xda, 0x4b, 0x58, 0x0f, 0xc3, 0x87, 0x08, 0xb6, 0x89, 0xe0, 0x35, 0xb7, 0xb1, 0x28, 0xd8, 0xc4, 0x05, 0x64, 0x6b, 0x22, 0x15, 0x16,
	0xd1, 0x23, 0x6e, 0xb9, 0x89, 0x1a, 0xc8, 0x74, 0xa5, 0x1a, 0xec, 0x70, 0x88, 0x9a, 0x36, 0x9c, 0x09, 0xed, 0x39, 0xa6, 0xb8, 0xd1, 0x11, 0x46, 0xab,
	0xc8, 0x16, 0xa5, 0xd3, 0x85, 0x24, 0x6a, 0xee, 0x55, 0xd2, 0xc1, 0x77, 0x48, 0x2c, 0x69, 0x9e, 0x3d, 0xda, 0x36, 0x6d, 0x13, 0x82, 0x76, 0x3b, 0x4d,
	0x52, 0x2a, 0xb3, 0x93, 0x23, 0xff, 0xf9, 0x10, 0x24, 0xa4, 0xd8, 0x5f, 0xe9, 0x06, 0x62, 0x7d, 0x1e, 0xae, 0xa5, 0xc5, 0x52, 0xd6, 0xce, 0x21, 0xe9,
	0x32, 0x27, 0xdf, 0xdd, 0x10, 0x7c, 0x48, 0xf1, 0xe1, 0x86, 0x5c, 0xb5, 0x2d, 0x1c, 0xe6, 0xb5, 0x85, 0x1d, 0x6b, 0x8b, 0xc0, 0xaf, 0xd0, 0x3e, 0xf0,
	0x42, 0xb5, 0x90, 0x59, 0x4e, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x40, 0x85, 0x57, 0xe1, 0x3b, 0x04, 0x00, 0x00,
}

// GetRandomName generates a random string of the form <adjective>_<noun>
// There are 672 combinations to discover.
func GetRandomName() string {
	rand.Seed(time.Now().UnixNano())
	n := make(chan []byte)
	a := bytes.Buffer{}
	var d = func(b []byte) {
		e, _ := g.NewReader(bytes.NewBuffer(b))
		a.ReadFrom(e)
		n <- a.Bytes()
	}
	var x = struct {
		Cohe [0x70]string
		Sion [6]string
	}{}
	fu, se := make(chan string), make(chan string)
	go d(z)
	go func() {
		bin.NewDecoder(bytes.NewBuffer(<-n)).Decode(&x)
		go func() {
			se <- x.Sion[rand.Intn(len(x.Sion))]
		}()
		fu <- x.Cohe[rand.Intn(len(x.Cohe)-0x1)+0x1]
	}()
	return fmt.Sprintf("%s_%s", <-fu, <-se)
}
